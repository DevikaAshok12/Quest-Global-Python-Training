DAY 1
45    6.76  6    36
121    11.0  11    121
Algorithm:
Read the input number N
Find Root of N and store it a variable ROOT
Now find the Floor of ROOT and store it in INT_ROOT
Now check if INT_ROOT * INT_ROOT is equal to N
If yes: print N is P S
else  : print N is not a P S
 
floor() It removes/truncates the decimal part if any.
round() If the decimal part is 0.5 or more then next integer number is returned, else the decimal part is truncated.
ciel() Returns the next integer number if the decimal part of the number is anything other than .0
So ciel(7.000001) is 8.

What is Data ? Data is some information 
What is Data ?
Data is some information which has an implicit meaning and it is worth storing.
 
Give a name to the below set:
{sky, needle, fever, transistor, webcam, biology, grass, point, her, mammle}
 
Give a name to the below set:
{Tiruvanantapuram, Chennai, Bengaluru, Amaravati, Panjim}
 
places/locations
cities
data
capital cities
capital cities of southern states of India
 
Types of data?
How we can classify the data ?
 
w.r.t. Data Types:
numeric
boolean
string
multimedia data (images, video, audio, gif etc)
 
w.r.t. nature of the data:
qlalitative and quantitative data
 
Numeric:
  number (int, long, short, byte, tinyint, smallint, bigint)
  number with precision (float and double)
string
  alphabetic (name of a place or person)
  alphanumeric (number of a vehicle, USN of a student etc)
In Pallakkad NSS college: The college eve... by Nithin Neelakanta Rao (Unverified)Nithin Neelakanta Rao (Unverified)3:09 PM
In Pallakkad NSS college:
The college every year filicitates a topper and only one and always.
 
Assume, 4 students got the top score 97. Now the college is in confusion what to do! Because there is no single topper.
So they sent to re-correction and gave these instructions to the evaluator:
1. If you find any grammer mistake (missing punctuations) or scratches done or not a good explanation, etc then you can remove 0.5 marks.
2. If you find the answer is very good and good readabality etc, then give extra 0.5 marks.
3. Any addition or deduction of marks can be done only 2 times.
 
Thus after re-correction,
s1 got bonus 0.5 and now the score is 97.5
s2 got 2 times deduction and hence 1 mark reduced and score is 96
s3 got 1 time deduction and new score is 96.5
s4 remained with 97 because there was no changes.
 
So, now the college NSS can declare the topper.
What helped the college to do so?
It is the decimal part of the number. And hence the decimal part of a number is not part of the, rather it is mentions the accuracy/precision of the number.
Last read ARITHMETIC OPERATORS: +   -   *   /   % 
ARITHMETIC OPERATORS:
+ - * / % 
Additions in Python:  // **
 
All the arithmetic operators are binary operators.
The operator is always placed in between the operands, i.e. we must use the INFIX NOTATION syntax only.
oprnd1 oprnd2 * (postfix notation)
+ oprnd1 prnd2  (prefix notation)
oprnd1 - oprnd2 (Infix notation)
The + and - operators have LESSER PRECEDENCE than * / and %
This rule is called as BRODMAS RULE.
Associativity : The Arithmetic expression is always solved Left to Right.
Arithmetic operators have Left to Right associativity.

x + y % z
The modulo operation must happen 1st. Then the remainder number is added to x.
However, the expression is read from left, that is we read 'x' first.
Hence, all Arithmetic expressions are solved only after converting the Programmer/user written Infix expression into postfix and then the expression io solved.

NOTE: The way integers are stored and the way floating point numbers are stored are different.
 +ve integers are stored only by impleting the algorithm to convert decimal/octal/hexa-decimal numbers into binary.
-ve numbers: The 2s compliment of the number is stored in memory.
float/double: IEEE standard formula is used to store the number.
And hence, when an Arithmetic operation happens, the Data Type of both the operands must be same. If not, one of the 2 operands is implicitly type casted.
TYPE CASTING:
Conversion of the DT of a value (usually a number) to another.
Explicit Casting: When the programmer adds the code(syntax) for the cast to happen:
var = '10.5'
num = float(var) 
Above is an example of Casting. Where we are converting a string into an integer number.
var = 10.5
num = int(var)
Here we are explicitly casting float data into int data.
Note that the decimal part (precision) is lost. Hence it is called as DOWN CAST.
Whenever we cast a lower sized data type value into a higher sized data type value, then it is called as UP CAST.
 
var = 10.5
num = var // This is implicit down cast
w.r.t. C/C++/Java
int num1 = 25;
double d = num; // This is implicit up cast
int num2 = int(d); // This explicit down cast

PYTHON
Characteristics:
-> Python is an Interpreted language and not a compiled language.
-> The code is taken by the interpreter, and each instruction is
Compiled -> Interpreted -> Run
-> In Python the DT of a variable is set dynamically and hence we need not mention the DT of a variable, rather start using it.
-> In Python everything is an Object including the functions.
-> Thus we can add properties to the object which are useful during development.
-> Python syntax is very easy to use and the language is developed such that the code is very compact and highly abstract.
-> The trade-off with Python is that, it is slower compared with Java during the runtime and very slow compared with C/C++ runtime.
-> Python is very suitable for building Apps that are developed on RAD sdlc.
-> Since it is easier and faster to develop in Python, lot of Modules are built for various domains and programming dimensions like Web App development (Django and Flask), for data analytics(science), we have numpy, pandas and for data visualization we have matplotlib etc. (List is very long)
-> Python give us built in data structures like:
list: mutable and ordered (can be indexed)
set: immutable and unordered (cannot be indexed)
tuple: immutable and ordered
dictionary: key-value pairs (mutable and ordered)
Along with the above, string type is implemented and all these have good amount of methods to perform various operations.
-> Python allows us to use the Ordered DS with negative indexing.
-> We can create a list of lists or lists with elements that are of different types such as set, dictionary, string etc.
-> We have the list comprehension, map method and lambda expressions and also regex which allows us to develop code for complex problems.
-> Pethora of modules like sys, math, pickle and so many of them that helps us to develop code very fast.
UNIQUE PYTHON FEATURES:
-> There is no function overloading in Python
-> Python allows us to develop code in OOP. But it is implicitly not a strict OOPL like Java.
-> We should know the difference between @static method and @class method
-> We must know as many methods that start with double underscore and ends with double underscore
__new__()
__init__()
__add__()
-----------------------------------------
num2 = 235
print('Num2 = ' + str(num2) + ' is smallest') # Here we are explicitly appending/concatenating a string to another.
 
print ('Num2 = ', num2, ' is smallest') # Here, the num2 will be implicitly converted to string and the appending/concatenation happens implicitly.
 
# In the above code snippet, the str(num2) is to CAST the 'int' data into 'str' data. Note that in Python, there is no Implicit Type Conversion.
---------------------------------------------------------------------------------------------------------------
Program3: small_of_two_nums.py
 
num1 = 7      # 7 here is an int literal (constant/fixed value)
num2 = 5
 
if num1 < num2:
    print ('Num1 = ', num1, ' is smallest')
else:
    print ('Num2 = ' + str(num2) + ' is smallest')
has context menu Archana Rajan (Unverified) is typing
ASSIGNMENT
Day1:
1. List the unique characteristics/features of Python
2. Write a program to check if a number is Even.
3. Write a program to convert a lower-case letter to upper case.
4. Check if a letter is vowel or consonant
5. Check if a number is single digit or not.



Python is a popular high-level programming language known for its readability, versatility, and ease of use. Here are some unique characteristics and features of Python:
1.	Readability and Simplicity: Python syntax is designed to be readable and straightforward, which makes it easy to learn and understand.

2.	Interpreted Language: Python is an interpreted language, meaning that code is executed line by line, which makes debugging easier.


3.	Dynamically Typed: Variables in Python do not need explicit declaration to reserve memory space. The declaration happens automatically when you assign a value to a variable.

4.	Extensive Standard Library: Python comes with a rich standard library that supports many common programming tasks such as file I/O, system calls, and even web browsers.


5.	Cross-Platform Compatibility: Python can run on various platforms including Windows, macOS, Linux, and more.

6.	Support for Multiple Programming Paradigms: Python supports multiple programming paradigms including procedural, object-oriented, and functional programming.

7.	Garbage Collection: Python has built-in garbage collection, which means it automatically handles memory management.


8.	Large Community and Active Development: Python has a large, active community and is continuously being improved. This community contributes to a wealth of resources, libraries, and frameworks.

9.	Extensive Libraries and Frameworks: Python boasts a vast array of libraries and frameworks such as NumPy, Pandas, Django, Flask, TensorFlow, and more, which can be used for web development, data analysis, machine learning, and more


10.	Easy Integration with Other Languages: Python can easily integrate with other programming languages like C, C++, and Java. This feature is facilitated through libraries such as Cython and Jython.

11.	Interactive Mode: Python supports an interactive mode which allows for interactive testing and debugging of code snippets.


12.	Portability: Python code can be written on one operating system and run on another without requiring changes, making it highly portable.
13.	Strong Support for Internet Protocols: Python has strong support for internet protocols such as HTML, XML, JSON, FTP, and more, making it a popular choice for web development.
14.	Scalability: Despite being easy to use, Python is also highly scalable and suitable for both small and large-scale applications.
15.	Open Source: Python is open-source software, which means it is free to use and distribute, even for commercial purposes.
